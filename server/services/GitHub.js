class GitHub {
  /**
   * Get a user's access token
   * @param {String} code the code generated by GitHub oAuth redirect
   * @returns the user's access token
   */
  static async getAccessToken(code) {
    // get environment variables
    let config = useRuntimeConfig();
    // fetch the GitHub endpoint
    let res = await $fetch("https://github.com/login/oauth/access_token", {
      method: "POST",
      body: JSON.stringify({
        client_id: config.public.githubClientId,
        client_secret: config.githubClientSecret,
        code,
      }),
    });

    // check for any errors
    if (res.error)
      throw createError({ statusCode: 500, statusMessage: res.error });

    return res.access_token;
  }

  /**
   * Get an authenticated user from GitHub
   * @param {String} access_token the user's access token from GitHub API
   * @returns the user's information
   */
  static async getAuthUser(access_token) {
    // fetch the GitHub endpoint
    let res = await $fetch("https://api.github.com/user", {
      headers: { Authorization: `Bearer ${access_token}` },
    });

    // check for any errors
    if (res.error)
      throw createError({ statusCode: 500, statusMessage: res.error });

    return res;
  }

  /**
   * Get a user's public repositories
   * @param {String} username the user's username
   * @param {String} access_token the user's access token from GitHub API
   * @returns
   */
  static async getPublicRepositories({ username, access_token }) {
    // fetch the GitHub endpoint
    let res = await $fetch(
      `https://api.github.com/users/${username}/repos?sort=created&direction=desc`,
      {
        headers: { Authorization: `Bearer ${access_token}` },
      }
    );

    // check for any errors
    if (res.error)
      throw createError({ statusCode: 500, statusMessage: res.error });

    return res;
  }
}

export default GitHub;
